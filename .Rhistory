q()
install.packages("pheatmap")
install.packages("vegan")
library(pheatmap)
library(gplots)
library(vegan)
library(permute)
library(lattice)
installed.packages("aegan")
installed.packages("vegan")
library(vegan)
library(permute)
installed.packages("gplots")
library(gplots)
installed.packages("gplots")
library(gplots)
installe.packages("gplots")
install.packages("gplots")
library(gplots)
install.packages("installr")
library(installr)
updateR()
library(pheatmap)
library(gplots)
library(vegan)
library(permute)
library(lattice)
library(vegan)
install。install.packages("pheatmap")
install.packages("pheatmap")
install.packages("gplots")
install.packages("gplots")
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
rnom
rnorm
read.csv
mean
swirl
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
View(flag_colors)
head()
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[, 19:23]
lapply(flag_shapes, range())
lapply(flag_shapes, range
)
shape_amt<-sapply(flag_shapes, range
)
shape_amt<-sapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
View(flags)
length(unique_vals)
lapply(unique_vals, length)
sapply(unique_vals, length)
lapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10<=10
5!=7
5!=7
(5 ==7 ) != TRUE
5 ==7
!5 ==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<=0)
any(ints<0)
all(ints>0)
sys.Data
sys.Data()
Sys.Date()
mean(c(2,4,5))
library(swirl)
swirl()
:q
q()
x<-mean(c(4,5)) 7
get <- function() x
View(get)
View(get)
View(get)
setinverse <- function(solve) m <<- solve
View(setinverse)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = inverse,
getinverse = inverse)
}
View(makeCacheMatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
View(cacheSolve)
x<-matrix(1:6,nrow = 2,ncol = 3)
x
cacheSolve(x)
d<-x
cacheSolve(d)
View(makeCacheMatrix)
makeCacheMatrix(d)
makeCacheMatrix()
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix(d)
cacheSolve(d)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
l<-c(1,2,3,4)
cachmean(l)
cachemean(l)
cachemean(l,2,3,4)
cachemean(c(l,2,3,4)
)
l$4
l
debug(makeVector)
makeVector(1,2,3,4)
makeVector(1)
cachmean(1,2,3,4)
cachemean(1,2,3,4)
cachemean(1)
cachemean(makeVector(1,2,3,4))
cachemean(makeVector(4))
cachemean(makeVector(4),makeVector(3))
cachemean(makeVector(4),makeVector(8))
cachemean(makeVector(4),makeVector(0))
undebug(makeVector)
makeVector(1 2 3 4)
x<-c(1,2,3,4)
is.vector(x)
makeVector(x)
View(makeVector)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
View(makeVector)
makeVector(1,2,3,4)
makeVector(c(1,2,3,4)
)
y<-makeVector(c(1,2,3,4)
)
View(y)
y$set(C(1,2,3,4))
y$set(1,2,3,4)
y$get()
View(y)
cachemean(y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
y<-makeCacheMatrix(matrix(1:4, 2, 2))
y
y$set()
y&get()
y$get()
View(y)
cacheSolve(y)
cacheSolve(y)
grepl？
grepl
grepl()
?grepl
source("https://bioconductor.org/biocLite.R")
biocLite("ExpressionNormalizationWorkflow")
a
a
biocLite("ExpressionNormalizationWorkflow")
biocLite("ExpressionNormalizationWorkflow")
biocLite("ExpressionNormalizationWorkflow")
workflow
workflow()
library(GeneExpressionWorkflow)
GeneExpressionWorkflow
biocLite()
updateR()
source("https://bioconductor.org/biocLite.R")
biocLite("rnaseqGene")
source("https://bioconductor.org/biocLite.R")
biocLite("rnaseqGene")
install.packages("Deseq2")
install.packages("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite()
load("~/smmuim/实验资料/results/yee/CLIP/20180524 simple/results/LQY/genecount/.RData")
biocLite("EnsDb.Mmusculus.v79")
source("https://bioconductor.org/biocLite.R")
biocLite("ensembldb")
biocLite("EnsDb.Mmusculus.v79")
install.packages("C:/Users/xue/Downloads/mgcv_1.8-24.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/xue/Downloads/mgcv_1.8-24.zip", repos = NULL, type = "win.binary")
biocLite("EnsDb.Mmusculus.v79")
library("EnsDb.Mmusculus.v79")
biocLite("GenomicFeatures")
biocLite("EnsDb.Mmusculus.v79")
biocLite("EnsDb.Mmusculus.v79")
source("https://bioconductor.org/biocLite.R")
biocLite("ensembldb")
biocLite("EnsDb.Mmusculus.v79")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("ensembldb")
biocLite("EnsDb.Mmusculus.v79")
library("EnsDb.Mmusculus.v79")
library("EnsDb.Mmusculus.v79")
library("ensembldb")
source("https://bioconductor.org/biocLite.R")
biocLite("ensembldb")
library("ensembldb")
library("rnaseqGene")
source("https://bioconductor.org/biocLite.R")
biocLite("rnaseqGene")
##安装bioconductor
source("https://bioconductor.org/biocLite.R")
biocLite()
library(rnaseqGene)
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite()
biocLite("rnaseqGene")
library(rnaseqGene)
biocLite("rnaseqGene")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("rnaseqGene")
biocLite("rnaseqGene")
library("EnsDb.Hsapiens.v86")
biocLite("EnsDb.Hsapiens.v86")
##安装bioconductor
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("rnaseqGene")
library("EnsDb.Hsapiens.v86")
biocLite("EnsDb.Hsapiens.v86")
source("https://bioconductor.org/biocLite.R")
library("EnsDb.Hsapiens.v86")
biocLite("EnsDb.Hsapiens.v86")
library("ggplot2")
library("DESeq2")
BiocManager::install("S4Vectors", version = "3.8")
detach("package:S4Vectors", unload=TRUE)
library("DESeq2")
BiocManager::install("DESeq2", version = "3.8")
library("DESeq2", lib.loc="~/R/win-library/3.5")
install.packages(c("dplyr", "RcppArmadillo"))
install.packages(c("foreign", "lattice", "MASS", "Matrix", "mgcv", "survival"), lib="C:/Program Files/R/R-3.5.1/library")
install.packages("GenomicRanges")
BiocManager::install("S4Vectors", version = "3.8")
library("DESeq2")
BiocManager::install("IRanges", version = "3.8")
detach("package:IRanges", unload=TRUE)
detach("package:IRanges", unload=TRUE)
BiocManager::install("IRanges", version = "3.8")
library("DESeq2")
detach("package:BiocGenerics", unload=TRUE)
BiocManager::install("BiocGenerics", version = "3.8")
library("DESeq2")
BiocManager::install("BiocGenerics", version = "3.8")
detach("package:BiocGenerics", unload=TRUE)
detach("package:GenomicRanges", unload=TRUE)
detach("package:BiocGenerics", unload=TRUE)
detach("package:GenomeInfoDb", unload=TRUE)
detach("package:GenomicRanges", unload=TRUE)
detach("package:BiocGenerics", unload=TRUE)
detach("package:IRanges", unload=TRUE)
BiocManager::install("BiocGenerics", version = "3.8")
detach("package:BiocGenerics", unload=TRUE)
detach("package:S4Vectors", unload=TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("HiTC", version = "3.8")
BiocManager::install("HiTC", version = "3.8")
setwd("~/GitHub/scRNA.seq.course")
reads <- read.table("data/tung/reads.txt", sep = "\t")
getwd()
reads <- read.table("C:/Users/xue/Documents/GitHub/scRNA.seq.course/data/tung/reads.txt", sep = "\t")
library(knitr)
opts_chunk$set(out.width='90%', fig.align = 'center')
library(SingleCellExperiment)
install.packages("SingleCellExperiment")
setwd("~/GitHub/scRNA.seq.course")
molecules <- read.table("data/tung/molecules.txt", sep = "\t")
molecules <- read.table("C:/Users/xue/Documents/GitHub/scRNA.seq.course/data/tung/molecules.txt", sep = "\t")
anno <- read.table("C:/Users/xue/Documents/GitHub/scRNA.seq.course/data/tung/annotation.txt", sep = "\t", header = TRUE)
head(molecules[ , 1:3])
head(anno)
umi <- SingleCellExperiment(
assays = list(counts = as.matrix(molecules)),
colData = anno
)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
library(SingleCellExperiment)
library(scater)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scater")
library(SingleCellExperiment)
library(scater)
